Dictionaries: We can use Dictionaries to store data in key:value pairs.
  -- Changable
  -- No Duplicates
  -- Ordered (As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are not-ordered.)

###
flowers = {'rose' : 'red', 'hibiscus' : 'orange'}
flowers['lavendar'] = 'Purple'
flowers['Lily'] = 'Green'
del flowers['hibiscus']
	
### Length
len(flowers)	

### Accessing Items
flowers['rose']
or
flowers.get("rose")

###Get Keys and Values
flowers.keys()
flowers.values()
flowers.items() #Return each item in a dictionary, as tuples in a list.

### Check if key exists
'rose' in flowers

### Loop
for x in flowers:
	print(x)
	
for x in flowers.values():
	print(x)
	
for x in flowers.keys():
	print(x)
	
for x in flowers.items():
	print(x)
	

### Functions

#The clear() method empties the dictionary.
flowers.clear()

# Copy a Dictionary
Copy a Dictionary
dict2 = dict1 #Problem dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2.
dict2.dict1.copy()

#fromkeys()
x = ('key1', 'key2', 'key3')
y = 10

dict.fromkeys(x, y)

print(thisdict)

#The pop() method removes the item with the specified key name:
flowers.pop('lily')
#The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):
flowers.popitem('lily')

#setdefault()
Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
flowers.setdefault('rose','white')

# Update
flowers['rose'] = 'white'
Or
flowers.update({"rose" : "black"})

### Delete an Item
#The del keyword removes the item with the specified key name:
del flowers['rose']







